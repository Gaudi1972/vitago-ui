const CACHE_NAME = 'vitago-cache-v' + new Date().getTime();
const urlsToCache = ['/'];

// üìå Instalar y cachear los archivos iniciales
self.addEventListener('install', (event) => {
  console.log('[SW] Instalando nueva versi√≥n...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => cache.addAll(urlsToCache))
      .then(() => {
        self.skipWaiting(); // üîπ Forzar que el SW nuevo est√© listo inmediatamente
      })
  );
});

// üìå Activar y limpiar cach√©s viejos
self.addEventListener('activate', (event) => {
  console.log('[SW] Activado, limpiando cach√©s antiguos...');
  event.waitUntil(
    caches.keys().then((cacheNames) =>
      Promise.all(
        cacheNames
          .filter((name) => name.startsWith('vitago-cache-') && name !== CACHE_NAME)
          .map((name) => caches.delete(name))
      )
    ).then(() => {
      return self.clients.claim(); // üîπ Tomar control inmediato de las pesta√±as
    }).then(() => {
      // üîπ Avisar a todas las pesta√±as que hay nueva versi√≥n
      return self.clients.matchAll({ type: 'window' }).then((clients) => {
        clients.forEach((client) =>
          client.postMessage({ type: 'NEW_VERSION_READY' })
        );
      });
    })
  );
});

// üìå Estrategia de red con fallback a cach√©
self.addEventListener('fetch', (event) => {
  event.respondWith(
    fetch(event.request)
      .then((response) => {
        // üîπ Guardar en cach√© en segundo plano
        const responseClone = response.clone();
        caches.open(CACHE_NAME).then((cache) => {
          cache.put(event.request, responseClone);
        });
        return response;
      })
      .catch(() => caches.match(event.request))
  );
});

// üìå Forzar activaci√≥n cuando el cliente lo pida
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('[SW] Forzando activaci√≥n inmediata...');
    self.skipWaiting();
  }
});
